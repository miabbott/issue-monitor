---
name: GitHub Issue Monitors

"on":
  schedule:
    # Run every 2 hours
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      config_filter:
        description: 'Filter configs by name pattern (optional)'
        required: false
        default: ''

jobs:
  discover-configs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Discover config files
        id: set-matrix
        run: |
          # Find all JSON config files (excluding template/example files)
          configs=$(find configs/ -name "*.json" -not -name "*template*" \
            -not -name "*example*" | jq -R -s -c 'split("\n")[:-1]')

          # Filter configs by input pattern if provided
          if [ -n "${{ github.event.inputs.config_filter }}" ]; then
            configs=$(echo "$configs" | jq --arg filter \
              "${{ github.event.inputs.config_filter }}" \
              'map(select(test($filter)))')
          fi

          echo "matrix={\"config\":$configs}" >> $GITHUB_OUTPUT
          echo "Found configs: $configs"

  monitor:
    needs: discover-configs
    if: ${{ needs.discover-configs.outputs.matrix != '{"config":[]}' }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    strategy:
      matrix: ${{ fromJson(needs.discover-configs.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Extract monitor info
        id: monitor-info
        run: |
          # Extract monitor name and metadata from config file
          monitor_name=$(jq -r '.name // "unnamed-monitor"' \
            "${{ matrix.config }}")
          monitor_desc=$(jq -r '.description // ""' "${{ matrix.config }}")

          echo "monitor_name=$monitor_name" >> $GITHUB_OUTPUT
          echo "monitor_desc=$monitor_desc" >> $GITHUB_OUTPUT
          echo "config_file=${{ matrix.config }}" >> $GITHUB_OUTPUT

          echo "Processing monitor: $monitor_name"
          if [ -n "$monitor_desc" ]; then
            echo "Description: $monitor_desc"
          fi

      - name: Run Issue Monitor
        id: monitor
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CONFIG_FILE: ${{ matrix.config }}
        run: |
          python src/monitor_github_notify.py
          if [ -f new_issues.json ]; then
            echo "has_new_issues=true" >> $GITHUB_OUTPUT
            echo "issue_count=$(jq length new_issues.json)" >> \
              $GITHUB_OUTPUT
          else
            echo "has_new_issues=false" >> $GITHUB_OUTPUT
            echo "issue_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Issue for New Findings
        if: steps.monitor.outputs.has_new_issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newIssues = JSON.parse(
              fs.readFileSync('new_issues.json', 'utf8'));
            const today = new Date().toISOString().split('T')[0];
            const configFile = '${{ matrix.config }}';
            const configData = JSON.parse(fs.readFileSync(configFile, 'utf8'));
            const monitorName = configData.name;

            let body = `Found ${newIssues.length} new GitHub issue${
              newIssues.length > 1 ? 's' : ''} matching keywords:\n\n`;

            body += `**Monitor:** \`${monitorName}\`\n`;
            body += `**Config:** \`${configFile}\`\n\n---\n\n`;

            for (const issue of newIssues) {
              body += `## 📋 [${issue.title}](${issue.html_url})\n\n`;
              body += `- **Repository:** \`${issue.repository}\`\n`;
              body += `- **Author:** [@${issue.user}](https://github.com/${
                issue.user})\n`;
              body += `- **Created:** ${
                new Date(issue.created_at).toLocaleString()}\n`;
              body += `- **Link:** ${issue.html_url}\n\n`;

              if (issue.body && issue.body.length > 0) {
                const preview = issue.body.substring(0, 200);
                body += `**Preview:**\n> ${preview}${
                  issue.body.length > 200 ? '...' : ''}\n\n`;
              }

              body += `---\n\n`;
            }

            body += `\n*This issue was automatically created by the ` +
              `GitHub issue monitor (\`${monitorName}\`) on ${today}*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔍 [${monitorName}] ${newIssues.length} new issue${
                newIssues.length > 1 ? 's' : ''} found - ${today}`,
              body: body,
              labels: [
                'github-monitor',
                'notification',
                'auto-created',
                `monitor-${monitorName.toLowerCase()` +
                  `.replace(/[^a-z0-9]/g, '-')}`
              ]
            });

            console.log(`✅ Created GitHub issue for ${
              newIssues.length} new findings from ${monitorName}`);

      - name: Upload results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitor-results-${{ matrix.config }}
          path: |
            new_issues.json
            *.log
          retention-days: 30
          if-no-files-found: ignore
